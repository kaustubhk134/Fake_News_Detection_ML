# -*- coding: utf-8 -*-
"""Fake_News_Detection1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pCLVaJ-TgtA4dB8LRMoxc7wqd4eESzOP
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import re
import string

data_fake = pd.read_csv('Fake.csv')
data_true = pd.read_csv('True.csv')

data_fake.head()

data_true.head()

fake_count = data_merge['class'].value_counts()[0]
true_count = data_merge['class'].value_counts()[1]

sns.countplot(x='class', data=data_merge, palette=['blue', 'orange'])  # Specify colors for Fake and Real
plt.title('Distribution of Fake and Real News')
plt.xlabel('News Type')
plt.ylabel('Count')
plt.xticks([0, 1], ['Fake', 'Real'])
plt.show()

subject_counts = data_merge.groupby('subject')['text'].count().reset_index()
subject_counts.columns = ['subject', 'count']

plt.figure(figsize=(12, 6))  # Adjust figure size as needed
sns.barplot(x='subject', y='count', data=subject_counts, palette='magma')  # Change 'viridis' to your desired palette
plt.title('Amount of News in Each Subject')
plt.xlabel('Subject')
plt.ylabel('Number of News Articles')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent overlapping elements
plt.show()

data_fake.info()

data_true.info()

data_fake['class'] = 0  #we are inserting column class as a target feature
data_true['class'] = 1

data_fake.shape, data_true.shape

data_fake_manual_testing = data_fake.tail(10)
for i in range(23480, 23470, -1):
    data_fake.drop([i], axis = 0, inplace = True)

data_true_manual_testing = data_true.tail(10)
for i in range(21416, 21406, -1):
    data_true.drop([i], axis = 0, inplace = True)

data_fake.shape, data_true.shape

data_fake_manual_testing['class'] = 0
data_true_manual_testing['class'] = 1

data_fake_manual_testing.head(10)

data_true_manual_testing.head(10)

data_merge = pd.concat([data_fake, data_true], axis = 0)
data_merge.head(10)

data_merge.columns

data = data_merge.drop(['title', 'subject', 'date'], axis = 1)

data.isnull().sum()

data = data.sample(frac = 1)

data.head()

data.reset_index(inplace = True)
data.drop(['index'], axis = 1, inplace = True)

data.columns

data.head()

# function to process the text
def wordopt(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub("\\W", " ", text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text

data['text'] = data['text'].apply(wordopt)

# defining dependent and independent variables
x = data['text']
y = data['class']

# spliting training and testing data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

# converting text to vectors
from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

# applying logistic regression
from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()
LR.fit(xv_train, y_train)

pred_lr = LR.predict(xv_test)

# accuracy of Linear Regression
LR.score(xv_test, y_test)*100

print(classification_report(y_test, pred_lr))

# applying decission tree
from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)

pred_dt = DT.predict(xv_test)

# accuracy of Decision Tree
DT.score(xv_test, y_test)*100

print(classification_report(y_test, pred_dt))

# applying Gradient Boosting Classifier              [takes longer time to execute]
from sklearn.ensemble import GradientBoostingClassifier

GB = GradientBoostingClassifier(random_state = 0)
GB.fit(xv_train, y_train)

pred_gb = GB.predict(xv_test)

# accuracy of Gradient Boosting Classifier
GB.score(xv_test, y_test)*100

print(classification_report(y_test, pred_gb))

# applying Random Forest
from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier(random_state = 0)
RF.fit(xv_train, y_train)

pred_rf = RF.predict(xv_test)

# accuracy of Random Forest
RF.score(xv_test, y_test)*100

print(classification_report(y_test, pred_rf))

# Accuracy scores obtained from the previous code
accuracy_scores = {
    'Logistic Regression': LR.score(xv_test, y_test) * 100,
    'Decision Tree': DT.score(xv_test, y_test) * 100,
    'Gradient Boosting': GB.score(xv_test, y_test) * 100,
    'Random Forest': RF.score(xv_test, y_test) * 100
}

# Create the bar chart
plt.figure(figsize=(8, 6))
plt.bar(accuracy_scores.keys(), accuracy_scores.values(), color=['blue', 'green', 'red', 'purple'])
plt.title('Accuracy Scores of Different Algorithms')
plt.xlabel('Algorithm')
plt.ylabel('Accuracy (%)')
plt.ylim(90, 100)  # Set y-axis limits for better visualization
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability

# Set y-axis ticks with more detail
plt.yticks(np.arange(90, 100.1, 0.3))  # Create ticks from 90 to 100 with a step of 0.1

# Turn on the grid
plt.grid(True)

plt.tight_layout()
plt.show()

def output_lable(n):
    if n == 0:
        return "Fake News"
    elif n == 1:
        return "Not A Fake News"

def manual_testing(news):
    testing_news = {"text":[news]}
    new_def_test = pd.DataFrame(testing_news)
    new_def_test["text"] = new_def_test["text"].apply(wordopt)
    new_x_test = new_def_test["text"]
    new_xv_test = vectorization.transform(new_x_test)
    pred_LR = LR.predict(new_xv_test)
    pred_DT = DT.predict(new_xv_test)
    pred_GB = GB.predict(new_xv_test)
    pred_RF = RF.predict(new_xv_test)

    return print("\n\nLR Prediction: {} \nDT Prediction: {} \nGB Prediction: {} \nRF Prediction: {}".format(output_lable(pred_LR[0]),
                                                                                                              output_lable(pred_DT[0]),
                                                                                                              output_lable(pred_GB[0]),
                                                                                                              output_lable(pred_RF[0])))

news = str(input())
manual_testing(news)